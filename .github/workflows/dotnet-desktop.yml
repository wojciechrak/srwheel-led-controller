name: .NET Core Container

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: ubuntu-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    container: mcr.microsoft.com/dotnet/sdk:6.0
    env:
      Solution_Name: SRWheel.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test --logger:"trx;LogFileName=test-results.trx"

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore -c $env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        
    - name: Build app
      run: dotnet build -c $env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Test Reporter
      uses: dorny/test-reporter@v1.6.0
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: TRX Tests            # Name of the check run which will be created
        path: test-results.trx    # Path to test results
        reporter: dotnet-trx        # Format of test results

